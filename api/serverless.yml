service: YoYo

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage}
  region: eu-west-1
  environment:
    YOYO_EMAIL: ${opt:YOYO_EMAIL}
    YOYO_DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    YOYO_EMAIL_CONSENT_TABLE: ${self:service}-consent-${opt:stage, self:provider.stage}
    SITE_OWNER_EMAIL: ${opt:SITE_OWNER_EMAIL}
    SENDGRID_API_KEY: ${opt:SENDGRID_API_KEY}
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    DEBUG_WATCHTOWER: 1
    # PROFILE_WATCHTOWER: 1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.YOYO_DB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.YOYO_EMAIL_CONSENT_TABLE}"
    - Effect: Allow
      Action:
        - 'kinesis:DescribeStream'
        - 'kinesis:PutRecord'
        - 'kinesis:PutRecords'
      Resource:
        Fn::GetAtt: [EventsStream, Arn]

package:
  include:
    - handler-wrapper.js
    - handler.js
    - config.js
    - watchtower/*.js

plugins:
  - serverless-step-functions

custom:
  # handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}


functions:
  create:
    handler: handler${self:custom.handlerFilePostfix}.create
    events:
      - http:
          path: /comments
          method: post
          cors: true
  query:
    handler: handler${self:custom.handlerFilePostfix}.query
    events:
      - http:
          path: /comments
          method: get
          cors: true
  get:
    handler: handler${self:custom.handlerFilePostfix}.get
    events:
      - http:
          path: /comments/{id}
          method: get
          cors: true
  update:
    handler: handler${self:custom.handlerFilePostfix}.update
    events:
      - http:
          path: /comments/{id}
          method: put
          cors: true

  consent:
    handler: handler${self:custom.handlerFilePostfix}.consent
    events:
      - http:
          path: /consent
          method: post
          cors: true

  revoke:
    handler: handler${self:custom.handlerFilePostfix}.revoke
    events:
      - http:
          path: /consent
          method: delete
          cors: true
  watchtower-ingestion: ${file(watchtower/functions.yml):watchtower-ingestion}
  watchtower-monitor: ${file(watchtower/functions.yml):watchtower-monitor}
  wt-monitor-trigger: ${file(watchtower/functions.yml):wt-monitor-trigger}

stepFunctions:
  stateMachines:
    checker: ${file(watchtower/stateMachine.yml):stateMachines.checker}

resources:
  Outputs:
    WTCheckerMachine: ${file(watchtower/outputs.yml):Outputs.WTCheckerMachine}
  Resources:
    EventsTable: ${file(watchtower/ddbTables.yml):Resources.EventsTable}
    CheckpointsTable: ${file(watchtower/ddbTables.yml):Resources.CheckpointsTable}
    InvocationStream: ${file(watchtower/kinesisStreams.yml):Resources.InvocationStream}
    EventsStream: ${file(watchtower/kinesisStreams.yml):Resources.EventsStream}
    EventWriterRole: ${file(watchtower/iamRoles.yml):Resources.EventWriterRole}
    EventReaderRole: ${file(watchtower/iamRoles.yml):Resources.EventReaderRole}
    StateMachineListExec: ${file(watchtower/iamRoles.yml):Resources.StateMachineListExec}
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.YOYO_DB_TABLE}
    ConsentDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.YOYO_EMAIL_CONSENT_TABLE}
